service: reto-tecnico

frameworkVersion: "3"

plugins:
  - serverless-openapi-documentation
  - serverless-offline

provider:
  name: aws
  runtime: nodejs18.x
  lambdaHashingVersion: '20201221'
  stage: ${opt:stage, 'dev'}
  environment:
    VEHICLE_DYNAMODB_TABLE: ${self:service}-${sls:stage}-vehicle
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - 'cloudformation:*'
            - 'iam:*'
            - 'lambda:*'
            - 'logs:*'
            - 'apigateway:*'
            - 'execute-api:*'
            - 'dynamodb:*'
            - 'cloudwatch:*'
            - 'events:*'
            - 's3:*'
          Resource: "*"

functions:
  createVehicle:
    handler: src/main/app/vehicle/controllers/Vehicle.createVehicle
    events:
      - http:
          path: /vehicle
          method: post
          cors: true

  getAllVehicles:
    handler: src/main/app/vehicle/controllers/Vehicle.getAllVehicles
    events:
      - http:
          path: /vehicle
          method: get
          cors: true

  getVehicleById:
    handler: src/main/app/vehicle/controllers/Vehicle.getVehicleById
    events:
      - http:
          path: /vehicle/{id}
          method: get
          cors: true

  updateVehicle:
    handler: src/main/app/vehicle/controllers/Vehicle.updateVehicle
    events:
      - http:
          path: /vehicle/{id}
          method: put
          cors: true

  deleteVehicle:
    handler: src/main/app/vehicle/controllers/Vehicle.deleteVehicle
    events:
      - http:
          path: /vehicle/{id}
          method: delete
          cors: true

resources:
  Resources:
    vehicleTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:provider.environment.VEHICLE_DYNAMODB_TABLE}
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
          -
            AttributeName: nombre
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: nombreGlobalIndex
            KeySchema:
              - AttributeName: nombre
                KeyType: HASH
            Projection:
              ProjectionType: 'ALL'
        BillingMode: PAY_PER_REQUEST